{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "scratchSmall",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a1b2a061-d028-4b82-889c-2abae1498998"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5c0fb3e3-b75f-49cd-9232-81ec8c721791/resourceGroups/perthstdotcom/providers/Microsoft.Synapse/workspaces/perthstdotcom/bigDataPools/scratchSmall",
				"name": "scratchSmall",
				"type": "Spark",
				"endpoint": "https://perthstdotcom.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/scratchSmall",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"\n",
					"# prepare spark session\n",
					"spark = SparkSession.builder.appName('filesystemoperations').getOrCreate()\n",
					"# spark context\n",
					"sc = spark.sparkContext\n",
					"\n",
					"# set ADLS file system URI\n",
					"sc._jsc.hadoopConfiguration().set('fs.defaultFS', 'abfs://landing@perthstdotcom.dfs.core.windows.net')\n",
					""
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"path = '/'\r\n",
					"li = mssparkutils.fs.ls(path)\r\n",
					"print(path);"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(li);"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# FileSystem manager\r\n",
					"fs = (sc._jvm.org\r\n",
					"      .apache.hadoop\r\n",
					"      .fs.FileSystem\r\n",
					"      .get(sc._jsc.hadoopConfiguration())\r\n",
					"      )"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for x in li:\r\n",
					"    thisPath = path + \r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"\r\n",
					"\r\n",
					"# Enter the ADLS path\r\n",
					"path = \"/carswap1642483432712.json\"\r\n",
					"\r\n",
					"# Delete the file or directory in ADLS using the below command\r\n",
					"deletion_status = fs.delete(sc._jvm.org.apache.hadoop.fs.Path(path), True)\r\n",
					"print(\"Deletion status –>\", deletion_status)\r\n",
					"\r\n",
					"# check whether the file or directory got deleted. This will return True if exists and False if does not\r\n",
					"status = fs.exists(sc._jvm.org.apache.hadoop.fs.Path(path))\r\n",
					"print(\"Status –>\", status)"
				],
				"execution_count": null
			}
		]
	}
}